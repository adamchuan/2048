<!DOCTYPE html>
<html ng-app="myApp" ng-controller="GameCtrl" ng-keydown="game.move">
  <head>
    <title>2048对战版</title>
    <script src="javascripts/angular.min.js"></script>
    <script src="javascripts/angular-animate.min.js"></script>
    <script src="javascripts/angular-cookies.min.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    <script>
         var myAppModule = angular.module('myApp', ['ngAnimate','ngCookies']); 
            // 扩展 添加onkeydown 
          myAppModule.directive('ngKeydown', function() {
              return {
                  restrict: 'A',
                  link: function(scope, elem, attrs) {
                       
                       //传入的这三个数据是 作用域 绑定的元素 和 keydown绑定的事件（我暂时这么理解）


                       // 这里差不多相当于绑定一个回调函数
                       var functionToCall = scope.$eval(attrs.ngKeydown);
                       elem.on('keydown', function(e){
                            // on the keydown event, call my function
                            // and pass it the keycode of the key
                            // that was pressed
                            // ex: if ENTER was pressed, e.which == 13
                            functionToCall(e);
                            scope.$digest();
                       });
                  }
              };
          });    
          myAppModule.factory('ioModel',function(){
              //构造函数
              var iosocket = new Object();

           

              return iosocket;

          });
          myAppModule.service('GameManager',function(ioModel,$window){

              this.socket = io.connect('/game');
              this.model = "wait";
              this.size = 4;  //棋盘大小
              this.length = this.size * this.size; 
              this.isMove = false;

              this.matchTimer = 0;
              this.myGame = new Object();
              this.myGame.score = 0;
              this.myGame.send = false;

              this.otherGame  = new Object();
              this.otherGame.score = 0 ;
              this.myGame.tiles = [];
              this.otherGame.tiles = [];

              this.matchPlay = {};
              this.matchPlay.timer = {}
              this.matchPlay.timer.end = false;
              this.matchPlay.timer.time = 180;
              this.matchPlay.timer.min = "3";
              this.matchPlay.timer.second = "00";

              this.matchPlay.readyTimer = {};
              this.matchPlay.readyTimer.value = 0;
              this.matchPlay.readyTimer.id = 0;
              this.matchPlay.result ={};

              this.matchPlay.result.end = false;
              this.matchPlay.result.value = "";

              this.practiceGame = new Object();
              this.practiceGame.tiles = [];
              this.practiceGame.bestScore = localStorage.bestScore || 0;
              this.practiceGame.currentScore = 0;
              this.practiceGame.lose = false;

              for(var i = 0; i < this.length ; i++){
                 this.myGame.tiles.push({
                    value : 0 
                 });
                 this.otherGame.tiles.push({
                    value : 0
                 });
                 this.practiceGame.tiles.push({
                    value : 0 
                 });
              }

              this.initMatchGame = function(){

                  this.otherGame.score = 0 ;
                  this.myGame.score = 0;
                  this.matchPlay.timer.end = false;
                  this.matchPlay.timer.time = 180;
                  this.matchPlay.timer.min = "3";
                  this.matchPlay.timer.second = "00";


                  this.matchPlay.readyTimer.value = 0;
                  this.matchPlay.readyTimer.id = 0;

                  this.matchPlay.result.end = false;
                  this.matchPlay.result.value = "";
              }
              var that = this;
              this.socket.on('win',function(data){
                  that.matchPlay.result.end = true;
                  that.matchPlay.result.value = "you win";
                  clearInterval(that.matchPlay.timer.id);
                  that.$scope.$digest();

              });
              this.socket.on('lose',function(data){
                  that.matchPlay.result.end = true;
                  that.matchPlay.result.value = "you lose";
                  clearInterval(that.matchPlay.timer.id);
                  that.$scope.$digest();
              });
              this.socket.on('draw',function(data){
                  that.matchPlay.result.end = true;
                  that.matchPlay.result.value = "draw";
                  clearInterval(that.matchPlay.timer.id);
                  that.$scope.$digest();
              });
              this.socket.on('matchresult',function(data){
                 var result = {
                    '0' : function(){

                    },
                    '1' : function(){
                        that.matchPlay.readyTimer.value = 3;
                        that.matchPlay.readyTimer.id = setInterval(function(){
                            that.matchPlay.readyTimer.value --;
                            if(that.matchPlay.readyTimer.value <= 0){
                                clearInterval(that.matchPlay.readyTimer.id);
                                that.model = "playing";
                                that.socket.emit("playready",{
                                });
                            }
                            that.$scope.$digest();
                        },1000);
                        clearInterval(that.matchTiming.id);
                    }
                 }
                 result[data]();
              });

              this.socket.on("gameStart",function(data){
                  that.initMatchGame();
                  that.matchPlay.timer.id = setInterval(function(){
                      that.matchPlay.timer.time --;
                      that.matchPlay.timer.min = Math.floor(that.matchPlay.timer.time / 60);
                      that.matchPlay.timer.second = that.matchPlay.timer.time % 60;
                      if(that.matchPlay.timer.time == 0){
                        clearInterval(that.matchPlay.timer.id);
                      }
                      that.$scope.$digest();
                  },1000);

                  that.clearBoard(that.myGame.tiles);
                  that.clearBoard(that.otherGame.tiles);
                  that.myGame.tiles[data.num1].value = 2;
                  that.myGame.tiles[data.num2].value = 2;
                  that.otherGame.tiles[data.num1].value = 2;
                  that.otherGame.tiles[data.num2].value = 2;
                  that.$scope.$digest();
              });
              this.socket.on("updateMyTiles",function(data){
                 console.log("收到tiles更新");
                 var data = JSON.parse(data);
                 var tiles = data.tiles;
                 console.log(tiles);
                 for(var i = 0 ; i < tiles.length ; i++){
                    that.myGame.tiles[i].value = tiles[i].value;
                    that.myGame.tiles[i].type = tiles[i].type;
                 }
                 that.myGame.score = data.score;
                 that.isMove = false;
                 that.$scope.$digest();
              });
              this.socket.on("updateOtherTiles",function(data){
                 console.log("收到对方tiles更新");
                 var data = JSON.parse(data);
                 var tiles = data.tiles;
                 for(var i = 0 ; i < tiles.length ; i++){
                    that.otherGame.tiles[i].value = tiles[i].value;
                    that.otherGame.tiles[i].type = tiles[i].type;
                 }
                 that.otherGame.score = data.score;
                 that.isMove = false;
                 that.$scope.$digest();
              });
              //匹配人
              this.match = function($event){
                  console.log("匹配开始");
                  this.matchTimer = 0;
                  this.model = "match";
                  this.socket.emit("match",{

                  });
                  this.matchTiming();
              }

              this.isGameOver = function(){
                  var end = true;
                  var tiles = this.practiceGame.tiles;
                  for(var i = 0 ; i < Game.length ; i = i + Game.size){ //横向检测
                       for(var j = i ; j < i + Game.size - 1 ; j ++){
                           if(tiles[j+1].value == tiles[j+1].value ){
                              end = false;
                              break;
                           }
                       }
                       if(!end){
                          break;
                       }
                  }
                  if(end){
                     for(var i = 0 ; i < Game.size ; i ++){ //纵向检测
                       for(var j = i ; j < Game.length - Game.size ; j = j + Game.size){
                           if(tiles[j].value == tiles[j+this.size].value ){
                              end = false;
                              break;
                           }
                       }
                       if(!end){
                          break;
                       }
                     }
                  }
                  return end;
              }
              //匹配时间显示
              this.matchTiming = function(){
                  this.matchTiming.id = setInterval(function(){    
                        that.matchTimer ++;
                        that.$scope.$digest();
                  },1000);

              }
              //练习赛
              this.practice = function($event){
                  this.model = "practice";
                  this.clearBoard(this.practiceGame.tiles);
                  this.initBoard(2);
              }
              this.initBoard = function(startNum){
                  for(var i = 0 ; i < startNum ; i++){
                      this.randomInsert();
                  }
                  this.practiceGame.lose = false;
              }
              this.clearBoard = function(tile){
                  for(var i = 0; i < Game.length ; i++){
                      tile[i].value = 0;
                  }
              }
              var Game = {
                  size :4 ,
                  length :16
              };
              this.addScore = function(value){
                  this.practiceGame.currentScore +=  value * 2;
                  if(this.practiceGame.currentScore > this.practiceGame.bestScore){
                     this.practiceGame.bestScore = this.practiceGame.currentScore;
                  }
              }
              this.saveScore = function(){
                  localStorage.bestScore = this.practiceGame.bestScore;
              }
              this.calculate = function(action){
                  var tiles = that.practiceGame.tiles,
                      tempArray = [],
                      x = 0;

                  function addTiles(tempArray){
                    for(var i = 0 ; i < tempArray.length - 1 ; i++){
                      if(tempArray[i] == tempArray[i+1]){ //值相同就相加
                         tempArray[i] = tempArray[i] * 2;
                         that.addScore(tempArray[i]);
                         tempArray.splice(i+1,1); 
                      }
                    }
                    return tempArray;
                  }
                  switch(action) {
                      case 'left':
                          console.log('left');

                          for(var i = 0; i < Game.length ; i = i + Game.size){
                            tempArray = [];
                            for(var j = i ; j < i + Game.size ; j ++){
                              if( tiles[j].value != 0){
                                 tempArray.push(tiles[j].value);
                              }
                            }
                            console.log(tempArray);
                            tempArray = addTiles(tempArray);
                  
                            for(var j = i; j < i + Game.size ; j ++){
                                 x = j - i;
                                 tiles[j].value = ( x < tempArray.length) ? tempArray[x] : 0;
                                 tiles[j].type = "";
                            }             
                          }
                          break;
                      case 'up':
                          console.log('up');             
                          for(var i = 0; i < Game.size ; i ++){
                              tempArray = [];
                              for(var j = i ; j < Game.length ; j = j + Game.size){
                                  if( tiles[j].value != 0 ){
                                      tempArray.push(tiles[j].value);
                                  }
                              }
                              tempArray = addTiles(tempArray);
                              for(var j = i; j <  Game.length  ; j = j + Game.size){
                                  x = (j - i) / Game.size;
                                  tiles[j].value = ( x < tempArray.length) ? tempArray[x] : 0;
                                  tiles[j].type = "";
                              }             
                          }
        
                          break;
                      case 'right':
                          console.log('right');
                          for(var i = Game.size - 1; i < Game.length ; i = i + Game.size){
                              tempArray = [];
                              for(var j = i ; j > i - Game.size ; j --){
                                  if( tiles[j].value != 0){
                                      tempArray.push(tiles[j].value);
                                  }
                              }
                              tempArray = addTiles(tempArray);
                              for(var j = i ; j > i - Game.size ; j --){
                                  x = i - j;
                                  tiles[j].value = ( x < tempArray.length) ? tempArray[x] : 0;
                                  tiles[j].type = "";
                              }         
                          }
                          
                         
                          break;
                      case 'down':
                          console.log('down');
                         
                          for(var i = Game.length - Game.size ; i < Game.length  ; i ++){ 
                              tempArray = [];    
                              for(var j = i ; j >= 0 ; j = j - Game.size){
                                  if( tiles[j].value != 0){
                                    tempArray.push(tiles[j].value);
                                  }
                              }
                              tempArray = addTiles(tempArray);
                              for(var j = i ; j >= 0 ; j = j - Game.size){
                                x = (i - j) / Game.size;
                                tiles[j].value = ( x < tempArray.length) ? tempArray[x] : 0;
                                tiles[j].type = "";
                              }
                          }
                        break;
                  }
              } 
              this.randomInsert = function(){
                  var position = [];
                  for(var i = 0 ; i < Game.length ; i++){
                    if(this.practiceGame.tiles[i].value == 0)
                       position.push(i); 
                  }
      
                  var newPos  = position[ Math.floor(Math.random() * position.length)];
                  
                  this.practiceGame.tiles[newPos].value = 2;
                  this.practiceGame.tiles[newPos].type = 'new';
              }
              this.getAvailableTiles = function(){
                var position = [];
                for(var i = 0 ; i < Game.length ; i++){
                  if(this.practiceGame.tiles[i].value == 0)
                     position.push(i); 
                }
                return position;
              }
              this.cancelMatch = function($event){
                this.socket.emit("cancelMatch",{

                });
                this.model = "wait";
                clearInterval(this.matchTiming.id);
              }
              /* 练习模式下的新游戏 */
              this.newGame = function($event){
                  this.clearBoard(this.practiceGame.tiles);
                  this.initBoard(2);
              }
              this.exit = function($event){
                  this.model = "wait" ;
                  this.saveScore();
                  this.practiceGame.currentScore = 0;
              }
              //监听move时间
              this.move = function(event){
                  if(that.isMove){
                    return;
                  }
                  var keyMap = {
                      37:'left',
                      38:'up',
                      39:'right',
                      40:'down'
                  }
                  var way = keyMap[event.which];
                  if(way){
                    var handle = {
                       'playing' : function(){
                          if(!that.matchPlay.result.end){
                            console.log("send");
                            that.socket.emit("action",way);// 向对方发送状态
                            that.isMove = true;
                          }
                       },
                       'practice' : function(){
                           that.calculate(way);
                           if(that.isGameOver()){
                              that.practiceGame.lose = true;
                           }else{
                              that.randomInsert();
                           }
                       },
                       'wait' : function(){

                       },
                       'match' : function(){

                       }
                    }
                    handle[that.model]();
                  }                  
              }
              this.giveup = function($event){
                  /*
                  this.matchPlay.end = true;
                  this.myGame.win = false;
                  this.otherGame.win = true;
                  clearInterval(this.matchPlay.timer.id);
                  */
                  this.socket.emit("giveup");
              }
          });
          myAppModule.controller("GameCtrl",function($scope,GameManager){
             $scope.game = GameManager;
             $scope.game.$scope = $scope;
          });
    </script>
    <style>
          body{
            color: #776e65;
            font-family: "Clear Sans", "Helvetica Neue", Arial, sans-serif;
            font-size: 18px;
          }
          .main{
            width:1200px;
            margin: 0px auto;
          }
          .practicePannel{
              width: 440px;
              height: 620px;
              position: absolute;
              left:50%;
              margin: 0px 0 0 -240px;
          }
          .gameControlPannel{
              width:  300px;
              height: 400px;
              position: absolute;
              top:50%;   
              left:50%;
              margin: -200px 0 0 -150px;
              text-align: center;
          }
          .gameControlPannel .title{
             font-size:40px;
             font-weight: bold;
             height: 40px;
             line-height: 40px;
             text-align: center;
          }
          .gameControlPannel .buttonList{
              margin-top:50px;
          }
          .gameControlPannel .Button{
              background: #8f7a66;
              border-radius: 3px;
              text-decoration: none;
              color: #f9f6f2;
              cursor: pointer;
              margin: 0px auto;
              text-align: center;
              width: 80px;
              font-size: 14px;
              height: 40px;
              line-height: 42px;
              padding: 0 20px;
              margin-top: 30px;
          }
          .gameControlPannel .matchTimer{
              margin-top :40px;
           }
          .boardwrap{
            width:460px;
            height: 460px;
            position: relative;
          }
          .content{
              width: 440px;
              height: 440px;
              position: relative;
          }
          .content .board{
            padding:5px 5px 5px 5px;
            width: 440px;
            height: 440px;
            background: rgb(25,24,22);
            border-radius: 15px;
            clear:both;
            font-size:30px;
          }
          .content .board .unit{
            float:left;
            margin:5px;
            width:100px;
            height: 100px;
            border-radius: 15px;
            line-height: 100px;
            text-align: center;
            position: relative;
          }
          .new-add {
            -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.250) 0.5s ;
            -moz-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.250) 0.5s ;
            -o-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.250) 0.5s ;
            transition:all cubic-bezier(0.250, 0.460, 0.450, 0.250) 0.5s ;
          }
           
          .new,
          .new-add.new-add-active {
            color:#FFF;
          }
          .new-remove.new-remove-active {
            font-size:0px;

          }
          .content .grid{
            padding:5px 5px 5px 5px;
            width: 440px;
            height: 440px;
            position: relative;
            margin-top: -450px;
            border-radius: 15px;
          }
          .tile.color0{
             background: rgb(88,94,92);
             color:#fff;
          }
          .tile.color2{
            background: rgb(182,194,154);
            color:rgb(220,87,18);
          }
          .tile.color4{
            background: rgb(138,151,123);
          }
          .tile.color8{
            background: rgb(244,208,0);
          }
          .tile.color16{
            background: rgb(147,224,255);
            color:rgb(255,66,93);
          }
          .tile.color32{
            background: rgb(92,167,186);
          }
          .tile.color64{
            background:rgb(175,215,237);
          }
          .tile.color128{
            background: rgb(2,22,52);
            color:rgb(205,201,125);
          }
          .tile.color256{
            background: rgb(205,179,128);
          }
          .tile.color512{
            background: rgb(3,54,73);
          }
          .tile.color1024{
            background: rgb(3,101,100);
          }
          .tile.color2048{
            background: rgb(248,252,137);
            color:rgb(84,115,135);
          }
          .tile-enter{
            opacity: 0;
            -webkit-transition: 0.2s linear all; /* Chrome */
            transition: 0.2s linear all;
          }
          .tile-enter.tile-enter-active {
            opacity: 1;
          }
          .position-0-0{
            left:15px;
            top:15px;
          }
          .position-0-1{
            left:125px;
            top:15px;
          }
          .position-0-2{
            left:235px;
            top:15px;
          }
          .position-0-3{
            left:345px;
            top:15px;
          }
          .position-1-0{
            left:15px;
            top:125px;
          }
          .position-1-1{
            left:125px;
            top:125px;
          }
          .position-1-2{
            left:235px;
            top:125px;
          }
          .position-1-3{
            left:345px;
            top:125px;
          }
          .position-2-0{
            left:15px;
            top:235px;
          }
          .position-2-1{
            left:125px;
            top:235px;
          }
          .position-2-2{
            left:235px;
            top:235px;
          }
          .position-2-3{
            left:345px;
            top:235px;
          }
          .position-3-0{
            left:15px;
            top:345px;
          }
          .position-3-1{
            left:125px;
            top:345px;
          }
          .position-3-2{
            left:235px;
            top:345px;
          }
          .position-3-3{
            left:345px;
            top:345px;
          }
          .above-game:after {
              content: "";
              display: block;
              clear: both;
          }
          .game-intro {
              float: left;
              line-height: 42px;
              margin-top: 0;
          }
          .restart-button {
              display: inline-block;
              background: #8f7a66;
              border-radius: 3px;
              padding: 0 20px;
              text-decoration: none;
              color: #f9f6f2;
              height: 40px;
              line-height: 42px;
              cursor: pointer;
              display: block;
              text-align: center;
              float: right;
          }
          .gameLayer,
          .gameEndLayer{
            width:460px;
            height: 460px;
            position: absolute;
            z-index: 3;
            top:0px;
            left:0px;
            background: rgba(255,255,255,0.7);
            text-align: center;
            color: #000;
            font-weight: bold;
            font-size:20px;
          }
          .gameEndLayer .title{
              font-size: 60px;
             
              margin: 0px auto;
              margin-top:100px;
          }
          .gameEndLayer .restart{
             display: inline-block;
             padding: 0 20px;
             height: 40px;
             line-height: 40px;
             background: #8f7a66;
             border-radius: 3px;
             cursor: pointer;
          }
          .gameEndLayer .share{
             margin: 0px auto;
             margin-top: 30px;
             width: 200px;
             font-size:12px;

          }

          .gameEndLayer.ng-hide-add, .gameEndLayer.ng-hide-remove {
            -webkit-transition:all linear 0.5s;
            -moz-transition:all linear 0.5s;
            -o-transition:all linear 0.5s;
            transition:all linear 0.5s;
            display:block!important;
          }
          .gameEndLayer.ng-hide-add.ng-hide-add-active,
          .gameEndLayer.ng-hide-remove {
            opacity:0;
          }
           
          .gameEndLayer.ng-hide-add,
          .gameEndLayer.ng-hide-remove.ng-hide-remove-active {
              opacity:0.7;
          }
          .matchTimer {
            padding:10px;
            height: 100px;
            overflow: hidden;
          } 
          .gameLayer.ng-enter
          .matchPannel.ng-enter,
          .gameControlPannel.ng-enter,
          .practicePannel.ng-enter,
          .buttonList.ng-enter,
          .matchTimer.ng-enter {
            -webkit-transition:all ease-in 0.2s;
            -moz-transition:all ease-in 0.2s;
            -o-transition:all ease-in 0.2s;
            transition:all ease-in 0.2s;
          }
          .gameLayer.ng-enter
          .matchPannel.ng-enter,
          .gameControlPannel.ng-enter,
          .practicePannel.ng-enter,
          .buttonList.ng-enter,
          .buttonList.ng-leave.ng-leave-active,
          .matchTimer.ng-enter{
              opacity: 0;
          }
          .gameLayer.ng-leave,
          .gameLayer.ng-enter.ng-enter-active,
          .matchPannel.ng-leave,
          .matchPannel.ng-enter.ng-enter-active,
          .gameControlPannel.ng-leave,
          .gameControlPannel.ng-enter.ng-enter-active,
          .practicePannel.ng-leave,
          .practicePannel.ng-enter.ng-enter-active,
          .buttonList.ng-leave,
          .buttonList.ng-enter.ng-enter-active,
          .matchTimer.ng-leave,
          .matchTimer.ng-enter.ng-enter-active {
              opacity: 1;
          }
          .pannelHeader{
              height: 124px;
          }
          .pannelHeader .title{
              font-size: 80px;
              font-weight: bold;
              float: left;
              padding:10px 0;
              height: 104px;
              line-height: 104px;
          }
          .pannelHeader .scoreContainer{
             float: right;
             text-align: left;
             width:200px;
             height: 104px;
             line-height: 22px;
             padding: 10px 0;
          }
          .pannelHeader .scoreContainer.score{
              background: #bbada0;
              padding: 0 25px;
              font-size: 10px;
              height: 25px;
              float: right;
              line-height: 25px;
              font-weight: bold;
              border-radius: 3px;
              color: white;
          }
          .pannelHeader .bestScore{
             margin-right:20px;
          }
          .pannelHeader .currentScore,
          .pannelHeader .bestScore{
              background: #bbada0;
              padding: 0 25px;
              font-size: 10px;
              height: 50px;
              float: right;
              line-height: 25px;
              font-weight: bold;
              border-radius: 3px;
              color: white;
          }
          .pannelFooter{
              -webkit-column-count:2;
              -moz-column-count:2;
              column-count:2;
          }
          .matchPannel{
              width:1280px;
              margin: 0px auto;
          }
          #mygame,
          #othergame{
              float:left;
          }
          .pannelFooter .Button{
            background: #8f7a66;
            border-radius: 3px;
            color: #f9f6f2;
            cursor: pointer;
            margin: 0px auto;
            text-align: center;
            width: 80px;
            font-size: 14px;
            height: 40px;
            line-height: 40px;
            padding: 0 20px;
          }
          #controlPanel{
            width:360px;
            float:left;
            text-align: center;
          }
          #controlPanel .matchTimer{
            font-size: 80px;
          }
          #controlPanel .topContainer .button{
            background: #8f7a66;
            border-radius: 3px;
            color: #f9f6f2;
            cursor: pointer;
            margin: 0px auto;
            text-align: center;
            width: 80px;
            font-size: 14px;
            height: 40px;
            line-height: 40px;
            padding: 0 20px;
            margin-top: 10px;
          }

          #controlPanel .topContainer .show{
                font-size: 60px;
                height: 60px;
                line-height: 60px;
          }
          #controlPanel .scoreContainer{
            margin-top: 50px;
            -webkit-column-count:2;
            -moz-column-count:2;
            column-count:2;
          }
          #controlPanel .scoreContainer .score{
             font-size: 30px;
          }

    </style>

  </head>
  <body>
      <div class="gameControlPannel" ng-if = "game.model =='wait' || game.model =='match'">
          <div class="title">
            2048对战版
          </div>
          <div class="buttonList" ng-if = "game.model == 'wait'">
            <div ng-click = "game.practice($event)" class="practice Button">练习模式</div>
            <div ng-click = "game.match($event)" class = "match Button">匹配模式</div>
          </div>
          <div class="matchTimer" ng-if = "game.model == 'match'"  >
               已匹配{{game.matchTimer}}秒
               <div ng-if = "game.matchPlay.readyTimer.value  > 0 ">
                    {{ "匹配成功 比赛即将开始" +  game.matchPlay.readyTimer.value  }} 
               </div>
               <div ng-click = "game.cancelMatch($event)" class="cancelMatch Button">取消匹配</div>
          </div>
      </div><!--gamePannel-->

      <div class = "practicePannel" ng-if = "game.model =='practice'">
          <div class = "pannelHeader">
               <div class = "title">
                  2048
               </div>
               <div class = "scoreContainer">
                  <p>
                    最高得分:<span class = "score">{{game.practiceGame.bestScore}}</span>
                  </p>
                  <p>
                    当前得分:<span class = "score">{{game.practiceGame.currentScore}}</span>
                  </p>
               </div>

          </div>
          <div id = "practiceGame" class = "boardwrap"> 
              <div class="content">
                <div class="board">
                    <div ng-repeat = "tile in game.practiceGame.tiles track by $index" class="unit tile color{{tile.value}}"  ng-class="tile.type">
                       {{ tile.value }}
                    </div>
                </div>
                <div class = "gameEndLayer" ng-show = "game.practiceGame.lose">
                    <p class="title">
                         Game Over 
                    </p>
                    <p>本次得分{{game.currentScore}}</p>
                    <p>最高分{{game.bestScore}}</p>
                    <a class = "restart" ng-click = "game.newGame($event)" >重新开始</a>
                    <a class = "restart" ng-click = "game.exit($event)" >退出</a>
                </div>
              </div>
          </div><!--practiceGame-->

          <div class = "pannelFooter">
              <div class = "Button" ng-click = "game.newGame($event)">重新开始</div>
              <div class = "Button" ng-click = "game.exit($event)">退出</div>
          </div>
      </div><!--practicePannel -->

      <div class="matchPannel" ng-if = "game.model == 'playing' "> 
        <div id="mygame" class="boardwrap"> 
            <div class="content">
              <div class="board">
                  <div ng-repeat = "tile in game.myGame.tiles track by $index" class="unit tile color{{tile.value}}" ng-class="tile.type">
                     {{tile.value }}
                  </div>
              </div>
            </div>
            <div class = "gameLayer" ng-if = "game.matchPlay.result.end">
            </div>
        </div><!--mygame-->
        <div id = "controlPanel">
              <div class = "topContainer" ng-if = "!game.matchPlay.result.end">
                 <div class = "matchTimer">
                    {{ game.matchPlay.timer.min + ":" + game.matchPlay.timer.second}}
                 </div>
                  <div class = "button" ng-click = "game.giveup($event)">放弃比赛</div>
              </div>
              <div class = "topContainer" ng-if = "game.matchPlay.result.end">
                    <p class="show">{{game.matchPlay.result.value}}</p>
                    <div class = "button" ng-click = "game.match($event)">继续匹配</div>
                    <div class = "button" ng-click = "game.exit($event)">主菜单</div>
              </div>
           
             <div class = "scoreContainer">
                <div class = "myScore">
                    我的得分
                    <p class = "score">{{game.myGame.score}}</p>
                </div>
                <div class = "otherScore">
                    对手得分
                    <p class = "score">{{game.otherGame.score}}</p>
                </div>
             </div>
        </div>
        <div id="othergame" class="boardwrap"> 
            <div class="content">
              <div class="board">
                  <div ng-repeat = "tile in game.otherGame.tiles track by $index" class="unit tile color{{tile.value}}"  ng-class="tile.type">
                      {{tile.value}}
              </div>
            </div>
             <div class = "gameLayer" ng-if = "game.matchPlay.result.end">
            </div>
        </div><!--othergame-->
      </div><!--main-->
  </body>
</html>